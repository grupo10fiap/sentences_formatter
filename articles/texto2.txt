Algoritmos estão em toda a parte. Eles operam no mercado de ações, decidem se você pode contratar um financiamento imobiliário e um dia poderão dirigir o seu carro. Eles fazem buscas na internet, mostram anúncios cuidadosamente escolhidos nos sites que você visita e decidem quais os preços mostrar em lojas on-line. Eles podem ser objeto de argumentos legais, causam preocupações regulatórias (no início deste mês, um grupo de especialistas pediu a proibição de algoritmos em robôs de guerra projetados para matar pessoas). Alguns algoritmos, como o que alimenta os resultados de pesquisa do Google, fez com que seus inventores ficassem muito ricos. Os algoritmos podem até afetar a forma como os cidadãos votam, alterando o resultado de uma eleição. Mas o que exatamente são algoritmos e o que os torna tão poderosos? Foi o que este post da revista The Economist  explicou.


SAIBA MAIS
Vulcões podem abastecer os carros elétricos do futuro
Aceleradora fundada por irmão de Elon Musk quer ajudar a construir fazendas urbanas
Está sobrando emprego no Canadá
Quer produzir sua energia elétrica? Veja por que este é um ótimo momento
Um algoritmo é, essencialmente, uma forma sem cérebro de fazer coisas inteligentes. É um conjunto de etapas precisas que não precisam de grande esforço mental para serem seguidas, mas que, se obedecidas exatamente e mecanicamente, levarão ao resultado desejado. O método de adição por colunas (em que você separa as unidades das dezenas das centenas) é um exemplos com o qual todos estão familiarizados - se você seguir o procedimento corretamente, chegará à resposta correta. Assim como a estratégia, redescoberta milhares de vezes por estudantes entediados, para ganhar sempre o jogo da velha. A chave é: cada passo deve ser o mais simples possível, sem deixar espaço para ambiguidades ou dúvidas. Cozinhar e dirigir, por exemplo, são tipos de algoritmos. Mas as instruções como "cozinhas a carne até que fique macia" ou "siga em frente por alguns quilômetros" são muito vagas para serem seguidas sem, pelo menos, alguma interpretação.
Algoritmo não é o bicho papão dos contos infantis. Se realmente pararmos para ver, ele é bastante simples, já que está frequentemente presente em nossas vidas. Ao começarmos a fazer algoritmos, fica muito mais fácil desenvolvê-los com segurança quando realizamos analogias com coisas simples do dia a dia. É isso que vamos ver a seguir.
Algoritmo é a base da ciência da computação e da programação. Quando falamos em programar, falamos, basicamente, em construir um algoritmo. Todo programa de um computador é montado por algoritmos que resolvem problemas matemáticos lógicos com objetivos específicos.

Mesmo pessoas que usam uma linguagem de programação para fazer seus programas de computadores estão, na realidade, elaborando algoritmos computacionais em suas mentes.
Um algoritmo não passa de passos sequenciais e lógicos que são organizados de forma a realizar a conclusão de certo problema. Mas precisamos entender que existem dois tipos de algoritmos – os Não Estruturados e os Estruturados.

Programadores usam algoritmos estruturados, pois se adequam a determinado objetivo ou certo fim.

Mas não são apenas os programadores que usam algoritmos. Em nosso cotidiano, os algoritmos Não Estruturados são trabalhados em nossas mentes sem nem mesmo percebermos. Vamos aprender mais sobre eles.

Algoritmos não estruturados
Em nossa rotina, executamos algoritmos sem perceber. Quando você levanta pela manhã, quando você sai de casa, quando almoça. Você está sempre executando tarefas enquanto realiza análises de decisões, análises de possibilidades, valida argumentos e diversos outros processos.

Há muitos exemplos de algoritmos. Um deles são os manuais de instruções. Manuais de instruções sempre contêm informações detalhadas sobre o que fazer em cada situação e nos previnem de maiores problemas.
Imagine a seguinte situação:

Situação: Dirigir até uma lanchonete e almoçar.
O que é preciso fazer para realizá-la?

1º Passo: Saia de casa.
2º Passo: Entre no carro.
3 º Passo: Se a garagem estiver aberta, saia. Senão, abra-a e saia.
4 º Passo: Dirija até o local desejado.
5º Passo: Se chegou, estacione o carro. Senão, continue até chegar e estacionar.
6 º Passo: Se estacionou, retire a chave da ignição e saia do carro.
7 º Passo: Tranque o carro e dirija-se à lanchonete.
8 º Passo: Se a lanchonete estiver aberta, entre e dirija-se ao caixa. Senão, volte para o carro. Procure outra lanchonete aberta, entre e dirija-se ao caixa.
9º Passo: Faça o pedido e efetue o pagamento.
10º Passo: Aguarde.
11º Passo: Se o número de seu pedido for chamado, dirija-se ao caixa e pegue sua refeição. Senão, aguarde ser chamado e pegue-a.
12 º Passo: Procure um lugar para sentar e coma.
13 º Passo: Se estiver satisfeito, jogue o resto na lixeira. Senão, faça outro pedido e coma.
14º Passo: Saia da lanchonete e dirija-se ao carro.
15 º Passo: Entre, ponha o sinto de segurança e vá para casa.
Você conseguiu almoçar?

Viu como você usa algoritmos na sua vida? Agora pense desde quando você acorda até quando você volta a dormir. Quantas tarefas necessitam de suas decisões? Com certeza muitas. Lógico que não paramos para ver a vida detalhadamente, mas quando percebemos que o que fazemos faz parte de um grande algoritmo de decisões, escolhas, entendemos como funciona um algoritmo computacional.

Abaixo estão listados alguns passos importantes para a escrita de um algoritmo computacional:

Preste atenção à ordem lógica da execução das tarefas;
Lembre-se de que ele deve ter um início e fim;
Ele deve ser completo;
Deve ter um alto nível de detalhes;
Cada tarefa é uma instrução, assim, defina-a bem.
Algoritmos Estruturados
São aqueles que buscam resolver problemas através do uso de um computador. São criados com base em uma linguagem de programação e podem ser escritos de diversas formas.

Um algoritmo pode ser representado pelo chamado Português Estruturado, que é uma ferramenta que usa combinações de sequências, seleções e repetições. São evitados advérbios e adjetivos, formas verbais diferentes da imperativa, muita pontuação e descrição esparsa.

Observe esse exemplo bem simples de Algoritmo Estruturado na linguagem de programação JAVA.

Listagem 1: Exemplo de algoritmo estruturado em Java

public class filmes extends conexao {     
  private String nome;
 
  public String getNome() {       
    return  nome ;   
  }
 
  public void setNome(String nome) {
    this.nome = nome;   
  }
}
Nesse exemplo, vemos uma classe chamada filmes, que é uma extensão de outra classe chamada conexão. Logo após, é declarada uma variável e são implementados os métodos get/set.

Para que um algoritmo em Português Estruturado seja conciso, ele deve seguir alguns pontos:

Evitar comandos longos;
Evitar adjetivos e advérbios;
Ter comandos legíveis;
Ter os comandos bem alinhados;
Possuir comentários para o esclarecimento de comandos;
Evitar ninhos de SE (muitas possibilidades desnecessárias para uma única situação. Ex.: se chover, eu pego o guarda-chuva; se não chover, eu não pego o guarda-chuva ou se eu pegar o vermelho, ele combinará com a roupa; se eu usar o roxo, não combinará).
Com essas noções de algoritmos podemos agora começar a programar sem medo. Afinal, todos nós temos um programador dentro de nós que realiza algoritmos diariamente e com toda a segurança.
Um algoritmo nada mais é que a descrição de um passo a passo para a realização de uma tarefa, como o modo de preparo de uma receita simples de bolo. Veja:

1 - Bata as claras em neve

2 - Misture as gemas com o açúcar e a margarina

3 - Acrescente leite e farinha de trigo aos poucos

4 - Adicione o fermento e as claras em neve

5 - Despeja a massa em uma forma

6 - Coloque no forno a 180°C por cerca de 50 min

Em outros exemplos no dia a dia, o próprio ato de ir para a escola pode ser um algoritmo, como:

1 - Sair de casa

2 - Entrar no ônibus

3 - Sair do ônibus

4 - Entrar na escola

Algoritmo na computação
Quando se trata de computadores, a definição de algoritmo é quase a mesma, como uma série de passos para que um programa realize uma ação. Para que isso ocorra corretamente, há algumas regras básicas. A primeira é que a ação precisa ter início e fim. Além disso, todos os passos e comandos devem estar descritos de maneira clara e objetiva para não dar abertura a ambiguidade. O computador não “pensa” sobre a ação. Ele somente segue os passos.

O fluxograma é uma representação bem prática para entendermos o conceito de algoritmo na computação. Para tal, vamos utilizar o exemplo de uma simples ação para abrir um link no navegador web. A entrada é a posição inicial do mouse na página, que constrói o contexto para que os comandos sejam dados. A variável diz respeito à opção do usuário de clicar ou não no hyperlink. A saída é a ação final, ou seja, a abertura ou não da nova página. Veja:


Os símbolos utilizados na figura acima respondem a um padrão, o que facilita bastante a representação dos algoritmos dessa maneira.

Lógica de programação
Entender a lógica dos algoritmos é fundamental para quem começa a programar, já que a construção de programas para computadores se baseia totalmente na definição do passo a passo para ações. Enquanto a lista da receita de bolo dá uma visão narrativa às ações, o fluxograma representa isso de maneira mais visual, pois as linguagens de programação são responsáveis por transmitir a sequência de afazeres com um “idioma” que o computador entende.

Portanto, ao passo que você aprende as linguagens mais básicas de escritas de códigos, é possível continuar estudando para avançar para as mais complicadas. Isso porque a lógica dos algoritmos sempre estará ali presente; o que muda é o formato com que os comandos são descritos, trazendo as particularidades de cada linguagem.

Usos dos algoritmos
Além de ações simples, como fazer um bolo ou abrir uma página no navegador, os algoritmos são muito utilizados no mercado da tecnologia. Atualmente possuímos máquinas que alimentam outras com informações e dados, conceito próximo do machine learning. Com isso, são construídos algoritmos capazes de reter informações e transformá-las em algo entendido pelos computadores para daí formar outro algoritmo. Veja alguns exemplos disso:

Algoritmos do Facebook
Diariamente, o Facebook reúne inúmeras informações dos usuários, coletando dados sobre a quantidade de mensagens trocadas, os conteúdos mais visualizados, likes, posts ocultados e todas as outras funções contidas nessa rede social. Tudo isso alimenta um banco de dados.

Essas informações comportamentais (likes, comentários, etc.) são transformadas em comandos para outros algoritmos. Utilizando uma série de variáveis, essa máquina consegue criar sistemas capazes de modificar o que o usuário vê no site de acordo com as suas preferências. O objetivo é utilizar os dados de preferências para dar à pessoa exatamente o que ela gosta, a fim de convencê-la a passar mais tempo na página e dar mais informações que serão novamente coletadas fazendo a máquina do Facebook girar.

Algoritmo do Google
As máquinas do Google são responsáveis por varrer a internet para indexar - armazenar as informações no banco de dados da Google - os bilhões de páginas encontradas na rede. Essas páginas, por sua vez, fornecem ao buscador uma série de dados, como textos, imagens e vídeos.

Seguindo mais de 200 critérios, o Google é capaz de categorizar essas páginas através de um sistema bem conhecido da empresa: o PageRank. Utilizando-se de algoritmos definidos por inteligência artificial, as máquinas ranqueiam os conteúdos de acordo com a relevância, mostrando-os na ordem do mais para o menos relevante nas páginas com os resultados da sua busca.

Aprenda mais sobre outros termos tão falados na tecnologia, como:

O que é big data?

As tecnologias por trás dos assistentes pessoais

Inovações que vêm por aí: a Internet das Coisas
Algoritmo do Instagram: um termo que pode deixar social medias e pessoas que trabalham com a rede social puxando os cabelos. O mistério que ronda essa tecnologia pouco tem a ver com o quanto ela é secreta ou pública, mas sim com o que o algoritmo pode fazer com alguns perfis, baixando o alcance e o engajamento.

Nesse texto, vamos desconstruir. Aqui a gente te explica exatamente como funciona o algoritmo do Instagram em 2019, quais critérios utiliza pra ranquear os conteúdos e também como você pode se aproveitar dele pra se dar bem na rede. Continua lendo!

Como o algoritmo do Instagram funciona
A primeira coisa que você precisa saber sobre o Instagram é: assim como qualquer empresa, a plataforma quer tirar o máximo de lucro possível com os anunciantes. Ou seja, quanto mais pessoas virem um anúncio, melhor pro anunciante. Sendo melhor anunciante, ele vai dar ainda mais dinheiro pro Instagram.

Para conseguir mais anúncios, o Instagram precisa que a gente gaste o maior tempo possível na rede. Dessa forma, em vez de passar cinco minutos no Instagram e ser impactados por três anúncios, por exemplo, gastamos três horas do nosso dia e vemos mais de 50 anúncios. Melhor pros anunciantes.

Algumas pessoas podem pensar “o Instagram vai virar um novo Facebook?”

Bom, a gente espera que não. E a plataforma realmente caminha para o sentido oposto disso, fazendo com que os anúncios rendam bons resultados e lançando novos recursos a cada mês, o que acaba injetando a dose de “modernidade” que toda rede social precisa pra sobreviver nos dias atuais.

Dito isso, vamos aos principais critérios de rankeamento do Instagram:

1. Interesses
O algoritmo do Instagram entende o quanto você gosta de um assunto pela forma como você se comporta dentro da ferramenta. Se você curte muitos posts de maquiagem e comenta em vídeos de cachorros, por exemplo, o algoritmo entende que deve dar prioridade a esses temas no seu feed.

Para isso eles usam uma tecnologia que consegue reconhecer o conteúdo das imagens em posts. Ou seja, se você sente falta de ver mais publicações de algum perfil específico, a dica é curtir e comentar em posts dessa conta para deixar bem claro pro Instagram que aquele conteúdo te interessa e que você quer ver mais dele.

Mas não esqueça: te mostrando conteúdos do seu interesse, o Instagram consegue te manter mais tempo na plataforma e, de quebra, te mostrar mais anúncios.

2. Cronologia
Ainda que o feed cronológico tenha dado lugar ao feed de relevância desde 2016, o algoritmo mais atualizado do Instagram voltou a levar em consideração o tempo de cada post.

Quem aí lembra de abrir o Instagram e ver uma publicação de três dias atrás? Pois é. Hoje em dia isso só acontece se você passar muito tempo sem entrar no app porque, atualmente, o Instagram quer mostrar a você os conteúdos de seu interesse que estejam atualizados também.

3. Relacionamento
Outro critério importantíssimo que o Instagram olha é o seu relacionamento. O algoritmo consegue descobrir com que pessoas você mais se relaciona a partir da suas interações. Envio de DMs, quem você marca nas suas fotos, quais stories você mais responde… Tudo isso indica pro Instagram quais são seus perfis preferidos.

Fazer com que você veja com prioridade os posts dos seus amigos, da sua família e dos seus artistas preferidos é um dos objetivos da plataforma – pra te manter lá dentro viciado, claro.

É bom lembrar também que, por ter o mesmo dono que o Facebook, o Instagram não deixaria escapar tão facilmente todas as informações que já possui de você na outra rede social. Eles estão sempre utilizando os dados do Facebook pra otimizar o algoritmo também.
Esses são os três principais critérios que o  algoritmo do Instagram utiliza pra rankear os posts no seu feed e na aba Explorar. Mas há ainda outras questões que também influenciam ele:

4. Usabilidade
A frequência com que você usa o Instagram também influencia em como o seu feed vai aparecer. Quem usa muito a plataforma vai receber conteúdos sempre bem atualizados.

Já quem entra uma vez no dia ou até mesmo poucas vezes na semana, recebe conteúdos mais antigos, mas que sejam de maior interesse.

5. Quem você segue
O algoritmo também leva em consideração a quantidade de perfis que você segue. Se o usuário segue pouquíssimas pessoas, é provável que ele receba uma boa parte do conteúdo de todos esses perfis.

Ao mesmo tempo, quanto mais gente você seguir, mais difícil vai ser para o Instagram te mostrar tudo, já que você vai ter que gastar horas e horas rolando a tela pra conseguir olhar a totalidade dos posts.

Como usar o algoritmo do Instagram ao seu favor
Se o algoritmo do Instagram usa critérios para priorizar alguns conteúdos e despriorizar outros, significa que a gente pode trabalhar na rede social com o objetivo de bater esses critérios. Montamos uma listinha pra você seguir por aí:

1. Use os novos recursos do Instagram
Anota pra não esquecer: o Instagram recompensa perfis que usam os recursos novos do da rede social. E como eles recompensam? Com mais alcance, ou seja, mostrando seu perfil com mais prioridade. Ganha você e ganha a plataforma, bingo!

Os últimos lançamentos da ferramenta tem sido focados principalmente nos Stories. Então não tenha medo de criar um conteúdo verticalizado sempre que surgir algum recurso novo. E eu te provo: nossa média de visualizações de stories é de 300 views. Com o lançamento da figurinha de Quizz, atingimos o número de 468 organicamente. Ou seja, um crescimento de 56%!
2. Incentive os seguidores a comentarem
“Marque aquele seu amigo que…” essas legendas parecem inofensivas, certo? Bom, de ingênuas, não têm nada. Já que o algoritmo observa quem a gente mais se relaciona e interage, a partir do momento que alguém comenta no seu post, o Instagram vai entender que seu perfil é importante para aquele usuário e vai entregar seu conteúdo com prioridade no feed dele.

Por isso, sempre incentive os seguidores a engajarem com você, responder uma pergunta, marcar um amigo, ou até reagir com um emoji rapidamente, já que hoje em dia já existe esse recurso.
3. Poste quando seus seguidores estiverem online
Os primeiros minutos do seu post são preciosos. Quanto mais pessoas interagirem com a publicação, mais o Instagram vai entender que ela é boa e mais o post vai ser mostrado pra outras pessoas, criando um looping.

Por isso, é muito importante que você saiba qual o melhor horário pra postar no seu perfil.  Há várias formas de descobrir isso, mas se você já tem uma conta comercial no Instagram, basta acessar o Instagram Insights.

No menu que aparece no canto superior direito, selecione Informações. Depois, clique na aba Público e desça a tela até embaixo. Um gráfico com os horários de cada dia mais acessados pelos seus seguidores vai aparecer. Invista sempre nos melhores horários!3
4. Invista em mídias de alta qualidade
De acordo com o próprio Instagram, pegar um bom lugar no feed dos seus seguidores está diretamente relacionado com a criação de um conteúdo excelente. Isso significa que não só a sua legenda deve ser perfeita e chamativa, mas suas imagens também.

O fato do Instagram ser uma rede que apela pro visual pesa ainda mais. Então, sempre que possível, produza fotos e vídeos de altíssima qualidade. Cores vibrantes, ideias diferentes e fotos de tirar o fôlego são tipos de conteúdo que costumam render bons números em interação.

Dá uma olhada na foto que produzimos para a campanha do lançamento da marcação de produtos no Postgrain. A ideia é super simples, mas já é super diferente do que estamos acostumados a ver no feed.
5. Faça stories com frequência
Não é a toa que os Stories influenciam bastante em como seu conteúdo vai ranquear para os usuários: a ferramenta também tem o seu algoritmo próprio. Por isso, você deve trabalhar para conseguir sempre os primeiros lugares entre as bolinhas que ficam lá em cima.

O ideal é que você trabalhe sempre pensando em como verticalizar o seu conteúdo. Além disso, não esqueça de incentivar o engajamento deles nos seus stories também: peça para que compartilhem, para que enviem para um amigo ou até mesmo para que respondam na DM. A própria ferramenta já nos fornece vários recursos para que interajam com a gente, então não esqueça de usar e abusar das enquetes e adesivos dinâmicos do Instagram.
6. Responda comentários enquanto eles ainda estão recentes
Sempre que possível, responda os comentários nas suas publicações enquanto eles ainda estão novos. Isso também cria o looping que falei acima: quanto mais comentários no seu post em pouco tempo, mais o Instagram vai achá-lo interessante.

Isso também incentiva outras pessoas a comentarem, já que elas sabem que a sua resposta é certa, além de dar uma boa impressão de marca, que é a que interage com os seguidores e está sempre disponível. É só ponto positivo!
7. Use conteúdo gerado pelo usuário
Reutilizar o conteúdo que os usuários produzem espontaneamente sobre sua marca pode te ajudar com o algoritmo! Primeiro porque vai provocar uma reação positiva no usuário que produziu aquele conteúdo, que vai sentir que você prestou atenção nele e que os elogios dele não foram em vão.

Segundo porque outros usuários podem ser influenciados pelo comportamento e, sabendo que vão ser reconhecidos, podem acabar contribuindo com você também. Sabe quem adora que você seja marcado nos posts dos outros? Ele mesmo, o algoritmo!


8. Abrace de vez as mensagens diretas!
O algoritmo do Instagram está muito interessado em quem você mais se relaciona e isso está diretamente relacionado às DMs que você recebe e envia no Instagram. Quanto mais seus seguidores interagirem com você por lá, com maior prioridade você vai aparecer no feed deles.

Então, esteja sempre à disposição pra conversar por mensagens, deixe isso bem claro nos Stories e nos posts do feed. Esse tipo de relacionamento vai ser, inclusive, muito positivo pro seu negócio, já que as mensagens diretas envolvem conversas mais longas e que dão a oportunidade de cultivar um relacionamento individual e duradouro com cada seguidor.
9. Faça um sorteio
Não tem jeito. Até hoje, a melhor forma de você ganhar diversas curtidas, seguidores e comentários ao mesmo tempo é fazendo um sorteio. Mas aqui estamos falando de algoritmo, então o que o sorteio pode ter a ver com ele?

TUDO! As regras dos sorteios no Instagram estão diretamente ligadas com o que o algoritmo mais preza, que são as interações (curtidas, comentários) e o relacionamento (seguidores, comentários, marcação de amigos).

Então, sempre que possível, faça um sorteio! Além de aumentar a movimentação no seu perfil, vai fazer bem pro algoritmo.
Mitos sobre o algoritmo
Apesar do Instagram ter vindo a público explicar as atualizações do algoritmo e ter elucidado várias questões que antes eram sombrias pra quem trabalha com o Instagram, o algoritmo da plataforma ainda é encoberto de muitos mitos.

Separamos as mentiras mais faladas sobre o algoritmo do Instagram pra te explicar como realmente funciona. Dá uma olhada:

“O Instagram esconde seus posts”
De uma vez por todas: o Instagram não está escondendo publicações de ninguém – a não ser aquelas atingidas pelo shadowban. Como falei anteriormente, você receber ou não um post no feed vai depender de muitos fatores: quantos perfis você segue, há quanto tempo você entrou no app pela última vez, com quem você se relaciona mais.

A verdade é que muitos usuários do Instagram seguem muitos perfis e, portanto, têm muita dificuldade de ver tudo. Mas o Instagram garante que, se você continuar rolando o feed, vai ver absolutamente TUDO o que foi postado pelos usuários que você segue.
“Vídeos recebem mais alcance que imagens”
O Instagram já deixou claro que não oferece mais alcance pra nenhum tipo de mídia específico. Então, se estiverem na mesma qualidade, um vídeo e uma imagem tem iguais chances de performarem bem.

“Contas comerciais recebem menos alcance”
Outro mito. O Instagram também já fez questão de explicar que não oferece uma “presença extra” a nenhum tipo de conta, nem pessoal nem business. Por isso, em termos de alcance, não há nenhuma prioridade em ter uma conta pessoal.

Na verdade a conta comercial possui muito mais benefícios, como acesso a dados detalhados, informações sobre seu público e botões call-to-action, por exemplo.

Conclusão
O algoritmo do Instagram não precisa ser essa fumaça turva envolvida de mistérios. Uma vez que você conhece a forma como ele funciona, seu trabalho pra conseguir usá-lo a seu favor fica muito mais fácil e natural.

Conta pra gente nos comentários que queremos muito saber: você já colocou em prática algumas dessas ações? O algoritmo baixou seu alcance ou engajamento?

Um algoritmo é uma sequência finita de instruções bem definidas e não ambíguas, cada uma das quais pode ser executada mecanicamente num período de tempo finito e com uma quantidade de esforço finita.1 2

O conceito de algoritmo é frequentemente ilustrado pelo exemplo de uma receita culinária, embora muitos algoritmos sejam mais complexos. Eles podem repetir passos (fazer iterações) ou necessitar de decisões (tais como comparações ou lógica) até que a tarefa seja completada. Um algoritmo corretamente executado não irá resolver um problema se estiver implementado incorretamente ou se não for apropriado ao problema.

Um algoritmo não representa, necessariamente, um programa de computador3 , e sim os passos necessários para realizar uma tarefa. Sua implementação pode ser feita por um computador, por outro tipo de autômato ou mesmo por um ser humano. Diferentes algoritmos podem realizar a mesma tarefa usando um conjunto diferenciado de instruções em mais ou menos tempo, espaço ou esforço do que outros. Tal diferença pode ser reflexo da complexidade computacional aplicada, que depende de estruturas de dados adequadas ao algoritmo. Por exemplo, um algoritmo para se vestir pode especificar que você vista primeiro as meias e os sapatos antes de vestir a calça enquanto outro algoritmo especifica que você deve primeiro vestir a calça e depois as meias e os sapatos. Fica claro que o primeiro algoritmo é mais difícil de executar que o segundo apesar de ambos levarem ao mesmo resultado.

O conceito de um algoritmo foi formalizado em 1936 pela Máquina de Turing de Alan Turing e pelo cálculo lambda de Alonzo Church, que formaram as primeiras fundações da Ciência da computação.

 Etimologia

Os historiadores da palavra algoritmo encontraram a origem no sobrenome, Al-Khwarizmi, do matemático persa do século IX Mohamed ben Musa, cujas obras foram traduzidas no ocidente cristão no século XII, tendo uma delas recebido o nome Algorithmi de numero indorum, sobre os algoritmos usando o sistema de numeração decimal (indiano). Outros autores, entretanto, defendem a origem da palavra em Al-goreten (raiz - conceito que se pode aplicar aos cálculos). Álgebra e algorismo também formam formas corrompidas da palavra, pois as pessoas esqueciam as derivações originais. O dicionário Vollständiges Mathematisches Lexicon (Leipzig, 1747) refere a palavra "Algorithmus"; nesta designação está combinado as noções de quatro cálculos aritméticos, nomeadamente a adição, multiplicação, subtração e divisão. A frase "algorithmus infinitesimalis" foi na altura utilizado para significar; "maneiras de calcular com quantidades infinitésimas" (pequenas), uma invenção de Leibnitz. Também é conhecido no meio financeiro, como "algos".


Uma animação do algoritmo de ordenação quicksort de uma matriz de valores ao acaso. As barras vermelhas marcam o elemento pivô. No início da animação, estando o elemento para o lado direito, é escolhido como o pivô.

Um programa de computador é essencialmente um algoritmo que diz ao computador os passos específicos e em que ordem eles devem ser executados, como por exemplo, os passos a serem tomados para calcular as notas que serão impressas nos boletins dos alunos de uma escola. Logo, o algoritmo pode ser considerado uma sequência de operações que podem ser simuladas por uma máquina de Turing completa.

Quando os procedimentos de um algoritmo envolvem oprocessamento de dados, a informação é lida de uma fonte de entrada, processada e retornada sob novo valor após processamento, o que geralmente é realizado com o auxílio de uma ou mais estrutura de dados.

Para qualquer processo computacional, o algoritmo precisa estar rigorosamente definido, especificando a maneira que ele se comportará em todas as circunstâncias. A corretividade do algoritmo pode ser provada matematicamente, bem como a quantidade assintótica de tempo e espaço (complexidade) necessários para a sua execução. Estes aspectos dos algoritmos são alvo da Análise de Algoritmos.

A maneira mais simples de se pensar um algoritmo é por umalista de procedimentos bem definida, na qual as instruções são executadas passo a passo a partir do começo da lista, uma ideia que pode ser facilmente visualizada através de um Fluxograma. Tal formalização adota as premissas da Programação Imperativa, que é uma forma mecânica para visualizar e desenvolver um algoritmo. Concepções alternativas para algoritmos variam em Programação Funcional e Programação Lógica.

Término do algoritmo

Alguns autores restringem a definição de algoritmo para procedimentos que eventualmente terminam. Marvin Minsky constatou que se o tamanho de um procedimento não é conhecido de antemão, tentar descobri-lo é um problema indecidível, já que o procedimento pode ser executado infinitamente, de forma que nunca se terá a resposta. Alan Turing provou em 1936 que não existe máquina de Turing para realizar tal análise para todos os casos, logo não há algoritmo para realizar tal tarefa para todos os casos. Tal condição é conhecida atualmente como Problema da Parada. (ou Critério de Parada!)

Para algoritmos intermináveis o sucesso não pode ser determinado pela interpretação da resposta e sim por condições impostas pelo próprio desenvolvedor do algoritmo durante sua execução.

 

Implementação

A maioria dos algoritmos é desenvolvida para ser implementada em um Programa de Computador. Apesar disso eles também podem ser implementados por outros modos tais como uma Rede Neural biológica (tal como no cérebro quando efetuamos operações aritméticas) em circuitos elétricos ou até mesmo em dispositivos mecânicos.

Para programas de computador existe uma grande variedade de Linguagens de Programação, cada uma com características específicas que podem facilitar a implementação de determinados algoritmos ou atender a propósitos mais gerais.

 

Análise de algoritmos

Ver artigo principal: Análise de algoritmos

A análise de algoritmos é um ramo da Ciência da Computação que estuda as Técnicas de Projeto de Algoritmos e os algoritmos de forma abstrata, sem estarem implementados em uma Linguagem de Programação em particular ou implementadas de algum outro modo. Ela preocupa-se com os recursos necessários para a execução do algoritmo tais como o tempo de execução e o espaço de armazenamento de dados. Deve-se perceber que para um dado algoritmo pode-se ter diferentes quantidades de recursos alocados de acordo com os parâmetros passados na entrada. Por exemplo, se definirmos que o fatorial de um número natural é igual ao fatorial de seu antecessor multiplicado pelo próprio número, fica claro que a execução de fatorial(10) consome mais tempo que a execução de fatorial(5).

Um meio de exibir um algoritmo a fim de analisá-lo é através da implementação por Pseudocódigo em Português Estruturado. O exemplo a seguir é um algoritmo em português estruturado que retorna (valor de saída) a soma de dois valores (também conhecidos como parâmetros ou argumentos, valores de entrada) que são introduzidos na chamada da Função:

 

Algoritmo "SomaDeDoisValores";

variável:

SOMA,A,B: inteiro;

inicio

Escreva("Digite um numero: ");

Leia(A);

escreva("Digite outro numero: ");

leia(B);

SOMA ← A + B;

escreva(SOMA);

fim.

 

 

Classificação

Classificação por Implementação:

Pode-se classificar algoritmos pela maneira pelo qual foram implementados.

Recursivo ou iterativo - um algoritmo recursivo possui a característica de invocar a si mesmo repetidamente até que certa condição seja satisfeita e ele é terminado, que é um método comum em programação funcional. Algoritmos iterativos usam estruturas de repetição tais como laços, ou ainda estruturas de dados adicionais tais como pilhas, para resolver problemas. Cada algoritmo recursivo possui um algoritmo iterativo equivalente e vice-versa, mas que pode ter mais ou menos complexidade em sua construção.

Lógico - um algoritmo pode ser visto como uma dedução lógica controlada. O componente lógico expressa os axiomas usados na computação e o componente de controle determina a maneira como a dedução é aplicada aos axiomas. Tal conceito é base para a programação lógica.

Serial ou paralelo - algoritmos são geralmente assumidos por serem executados instrução a instrução individualmente, como uma lista de execução, o que constitui um algoritmo serial. Tal conceito é base para a programação imperativa. Por outro lado existem algoritmos executados paralelamente, que levam em conta as arquiteturas de computadores com mais de umprocessador para executar mais de uma instrução ao mesmo tempo. Tais algoritmos dividem os problemas em subproblemas e o delegam a quantos processadores estiverem disponíveis, agrupando no final o resultado dos subproblemas em um resultado final ao algoritmo. Tal conceito é base para a programação paralela. De forma geral, algoritmos iterativos são paralelizáveis; por outro lado existem algoritmos que não são paralelizáveis, chamados então problemas inerentemente seriais.

Determinístico ou não-determinístico - algoritmos determinísticos resolvem o problema com uma decisão exata a cada passo enquanto algoritmos não-determinísticos resolvem o problema ao deduzir os melhores passos através de estimativas sob forma deheurísticas.

Exato ou aproximado - enquanto alguns algoritmos encontram uma resposta exata, algoritmos de aproximação procuram uma resposta próxima a verdadeira solução, seja através de estratégia determinística ou aleatória. Possuem aplicações práticas sobretudo para problemas muito complexos, do qual uma resposta correta é inviável devido à sua complexidade computacional.

 

 

Classificação por Paradigma:

Pode-se classificar algoritmos pela metodologia ou paradigma de seu desenvolvimento, tais como:

Divisão e Conquista - algoritmos de divisão e conquista reduzem repetidamente o problema em sub-problemas, geralmente de forma recursiva, até que o sub-problema é pequeno o suficiente para ser resolvido. Um exemplo prático é o algoritmo de ordenação Merge Sort. Uma variante dessa metodologia é o decremento e conquista, que resolve um sub-problema e utiliza a solução para resolver um problema maior. Um exemplo prático é o algoritmo para Pesquisa Binária.

Programação Dinâmica - pode-se utilizar a programação dinâmica para evitar o re-cálculo de solução já resolvidas anteriormente.

Algoritmo ganancioso - um algoritmo ganancioso é similar à programação dinâmica, mas difere na medida em que as soluções dos sub-problemas não precisam ser conhecidas a cada passo, uma escolha gananciosa pode ser feita a cada momento com o que até então parece ser mais adequado.

Programação Linear

Redução - a redução resolve o problema ao transformá-lo em outro problema. É chamado também transformação e conquista.

Busca e enumeração - vários problemas podem ser modelados através de Grafos. Um algoritmo de exploração de grafo pode ser usado para caminhar pela estrutura e retornam informações úteis para a resolução do problema. Esta categoria inclui Algoritmos de Busca e backtracking.

Paradigma heurístico e probabilístico - algoritmos probabilísticos realizam escolhas aleatoriamente. Algoritmos Genéticos tentam encontrar a solução através de ciclos de mutações evolucionárias entre gerações de passos, tendendo para a solução exata do problema. Algoritmos heurísticos encontram uma solução aproximada para o problema.
INTRODUÇÃO

A automatização de tarefas é um aspecto marcante da sociedade moderna. O aperfeiçoamento tecnológico alcançado, com respeito a isto, teve como elementos fundamentais a análise e a obtenção de descrições da execução de tarefas em termos de ações simples o suficiente, tal que pudessem ser automatizadas por uma máquina especialmente desenvolvida para este fim, O COMPUTADOR.

Em ciência da computação houve um processo de desenvolvimento simultâneo e interativo de máquinas (hardware) e dos elementos que gerenciam a execução automática (software) de uma dada tarefa. E essa descrição da execução de uma tarefa, como considerada acima, é chamada algoritmo.

O objetivo desse curso é a Lógica de Programação dando uma base teórica e prática, suficientemente boa, para que, o aluno domine os algoritmos e esteja habilitado a aprender uma linguagem de programação. Será mostrado também um grupo de algoritmos clássicos para tarefas cotidianas, tais como : ordenação e pesquisa.

DEFINIÇÃO DE ALGORITMO

       "O conceito central da programação e da Ciência da Computação é o conceito de algoritmos, isto é, programar é basicamente construir algoritmos."

        É a descrição, de forma lógica, dos passos a serem executados no cumprimento de determinada tarefa.

       "O algoritmo pode ser usado como uma ferramenta genérica para representar a solução de tarefas independente do desejo de automatizá-las, mas em geral está associado ao processamento eletrônico de dados, onde representa o rascunho para programas (Software)."

      "Serve como modelo para programas, pois sua linguagem é intermediária à linguagem humana e às linguagens de programação, sendo então, uma boa ferramenta na validação da lógica de tarefas a serem automatizadas."

       "Um algoritmo é uma receita para um processo computacional e consiste de uma série de operações primitivas, interconectadas devidamente, sobre um conjunto de objetos. Os objetos manipulados por essas receitas são as variáveis."

        O algoritmo pode ter vários níveis de abstrações de acordo com a necessidade de representar ou encapsular detalhes inerentes às linguagens de programação. Ex: Certamente um algoritmo feito com o objetivo de servir como modelo para uma linguagem de III geração é diferente daquele para uma linguagem de IV geração. Mas isso não impede que a ferramenta em si possa ser usada em ambos o caso.

       Como qualquer modelo, um algoritmo é uma abstração da realidade. A abstração é o processo de identificar as propriedades relevantes do fenômeno que esta sendo modelado. Usando o modelo abstrato, podemos nos centrar unicamente nas propriedades relevantes para nós, dependendo da finalidade da abstração, e ignorar as irrelevantes.

       É a forma pela qual descrevemos soluções de problemas do nosso mundo, afim de, serem implementadas utilizando os recursos do mundo computacional. Como este possuí severas limitações em relação ao nosso mundo, exige que, sejam impostas algumas regras básicas na forma de solucionar os problemas, para que, possamos utilizar os recursos de hardware e software disponíveis. Pois, os algoritmos, apesar de servirem para representar a solução de qualquer problema, no caso do Processamento de Dados, eles devem seguir as regras básicas de programação para que sejam compatíveis com as linguagens de programação. 

LINGUAGEM DE DESCRIÇÃO DE ALGORITMO (LDA)

Para escrevermos algoritmos é preciso uma linguagem clara e que não deixe margem a ambiguidades, para isto, devemos definir uma sintaxe e uma semântica, de forma a permitir uma única interpretação das instruções num algoritmo.

Estrutura um Algoritmo

Algoritmo Nome_Do_Algoritmo

variáveis

Declaração das variáveis

Procedimentos

Declaração dos procedimentos

Funções

Declaração das funções

Início

Corpo do Algoritmo

Fim

Identificadores

Representam os nomes escolhidos para rotular as variáveis, procedimentos e funções, normalmente, obedecem as seguintes regras :

1.      O primeiro caracter deve ser uma letra

2.      Os nomes devem ser formados por caracteres pertencentes ao seguinte conjunto : {a,b,c,..z,A,B,C,...Z,0,1,2,...,9,_}

3.      Os nomes escolhidos devem explicitar seu conteúdo.

Variáveis:

Unidades básicas de armazenamento das informações a nível de linguagens de programação. Os tipos de dados e variáveis utilizados dependem da finalidade dos algoritmos, mas, podemos definir alguns, pelo fato de serem largamente utilizados e implementados na maioria das linguagens, sendo estes:

INTEIRO : qualquer número inteiro, negativo, nulo ou positivo.

REAL : qualquer número real, negativo, nulo ou positivo.

CARACTER : qualquer conjunto de caracteres alfanuméricos.

LÓGICO : tipo especial de variável que armazena apenas os valores V e F, onde V representa VERDADE e F FALSO

Declaração de variáveis

Para que os programas manipulem valores, estes devem ser armazenados em variáveis e para isso, devemos declará-las de acordo com a sintaxe:

NomeVariável,... : tipo

Operações Básicas:

Na solução da grande maioria dos problemas é necessário que as variáveis tenham seus valores consultados ou alterados e, para isto, devemos definir um conjunto de OPERADORES, sendo eles:

·        OPERADOR DE ATRIBUIÇÃO:

NomeDaVariavel ¬ Valor ou Expressão Atribuída.

·        OPERADORES ARITMÉTICOS: 

+ = Adição

Quociente = Quociente da divisão de inteiros

* = Multiplicação

Resto = Resto da divisão de inteiros

- = Subtração ou inversor do sinal.

EXP(a,b) = Exponenciação ab

/ = Divisão

 

·        FUNÇÕES PRIMITIVAS: SEN(x); COS(x); TG(x); ABS(x); INT(x); Raiz(x); PI( );

·        OPERADORES RELACIONAIS:

São utilizados para relacionar variáveis ou expressões, resultando num valor lógico (Verdadeiro ou Falso), sendo eles: 

=- igual

¹ - diferente

< - menor

> - maior

£ - menor ou igual

³ - maior ou igual

·        OPERADORES LÓGICOS:

São utilizados para avaliar expressões lógicas, sendo eles:

e - e lógico ou conjunção.

ou - ou lógico ou disjunção.

não - negação.

PRIORIDADE DE OPERADORES:

Durante a execução de uma expressão que envolve vários operadores, é necessário a existência de prioridades, caso contrário poderemos obter valores que não representam o resultado esperado.

A maioria das linguagens de programação utiliza as seguintes prioridades de operadores :

1º - Efetuar operações embutidas em parênteses "mais internos"

2º - Efetuar Funções

3º - Efetuar multiplicação e/ou divisão

4º - Efetuar adição e/ou subtração

5º - Operadores Relacionais

6º - Operadores Lógicos

OBS: O programador tem plena liberdade para incluir novas variáveis, operadores ou funções para adaptar o algoritmo as suas necessidades, lembrando sempre, de que, estes devem ser compatíveis com a linguagem de programação a ser utilizada.

COMANDOS DE ENTRADA E SAÍDA : 

No algoritmo é preciso representar a troca de informações que ocorrerá entre o mundo da máquina e o nosso mundo, para isso, devemos utilizar comandos de entrada e saída, sendo que, a nível de algoritmo esses comandos representam apenas a entrada e a saída da informação, independe do dispositivo utilizado (teclado, discos, impressora, monitor,...), mas, sabemos que nas linguagens de programação essa independência não existe, ou seja, nas linguagens de programação temos comandos específicos para cada tipo de unidade de Entrada/Saída.

Comando de Entrada de Dados

Leia(variável_1, variável_2,...)

Comando de Saída de Dados

Imprima(expressão_1, expressão_2,...)

COMANDOS DE CONTROLE DE FLUXO:

Para representar a solução de um problema devemos escrever o conjunto de passos a serem seguidos, sendo que, a maioria dos problemas exigem uma dinâmica na sua solução, impondo assim que os algoritmos executem conjunto de instruções de acordo com as possíveis situações encontradas no problema original. E de acordo com a Programação Estruturada os mecanismos utilizados para esse controle são : Sequência, Seleção e Repetição.

·        SEQUÊNCIA : usada para executar comandos passo a passo, sabendo que todos eles serão executados na ordem de escrita, sem nenhum desvio. Uma sequência pode possuir um ou vários comandos, os quais devem ser delimitados pelos identificadores Início e Fim.

Inicio

Comando_1

...

Comando_n

Fim

·        SELEÇÃO : usada para tomar decisões, ou seja desviar a execução do algoritmo de acordo com uma condição, podendo ser simples ou composta. 

Simples

Composta

Se (Expressão Lógica)

Então Sequência_1

Se (Expressão Lógica)

Então Sequência_1

Senão Sequência_2

·        REPETIÇÃO : Serve para efetuar um conjunto de ações repetidas vezes. Existem três tipos básicos de repetições, sendo elas. 

Enquanto (Expressão Lógica) faça

Sequência

O comando Enquanto analisa a Expressão Lógica e enquanto o seu resultado for, o valor lógico, Verdade a Sequência é executada.

Para variável ¬ valor_inicial até valor_final faça

Sequência

O comando Para incrementa, a variável, a partir do valor_inicial de uma unidade, até que, esta atinja o valor_final. E para cada incremento a Sequência é executada..

Repita

Sequência

Até (Expressão Lógica)

O comando Repita executa a Sequência até que o valor retornado pela Expressão Lógica seja Verdadeiro

TIPOS DE DADOS

Estruturas formadas por um conjunto de variáveis, permitindo modelar de forma mais natural os dados.

VETOR: estrutura formada por um conjunto unidimensional de dados de mesmo tipo (homogêneo) e possuindo número fixo de elementos (Estático). Na declaração dos vetores devemos informar o seu nome, seu tipo (inteiro, real, caracter, ...), e seu tamanho (número de elementos). Cada elemento do vetor é identificado por um índice (unidimensional), o qual indica a sua posição no vetor.

Declaração :

NomeDoVetor : vetor[nº de elementos] de Tipo do Vetor

Referência :

NomeDoVetor[índice]

MATRIZ: estrutura semelhante ao vetor, sendo que, pode possuir n dimensões. Desta forma para fazer referência aos elementos de uma matriz, precisaremos de tantos índices quanto for suas dimensões.

Declaração :
NomeDaMatriz : matriz[dimensões] de Tipo da Matriz

Referência :

NomeDaMatriz[índices]

REGISTRO: estrutura formada por um conjunto de variáveis, que podem possuir tipos diferentes (Heterogêneo), agrupadas em uma só unidade.

Declaração :

NomeDoRegistro : Registro

Declaração de Variáveis

FimRegistro

Referênca :

NomeDoRegistro.NomeDaVariável

Obs: Podemos ainda definir um vetor formado por registros.

MODULARIZAÇÃO

A modularização consiste num método para facilitar a construção de grandes programas, através de sua divisão em pequenas etapas, que são : módulos, rotinas, sub-rotinas ou sub-programas. Permitindo o reaproveitamento de código, já que podemos utilizar um módulo quantas vezes for necessário, eliminando assim a necessidade de escrever o mesmo código em situações repetitivas.

Procedimentos - Um procedimento é um bloco de código precedido de um cabeçalho que contém o Nome do procedimento e seus parâmetros. Com isto, podemos fazer referência ao bloco de código de qualquer ponto do algoritmo através do seu nome e passando os seus parâmetros.

Declaração :

Procedimento NomeDoProcedimento [(parâmetros)]

Variáveis

Inicio

Comandos;

Fim;

Onde, parâmetros representam as variáveis que devem ser passadas ao procedimento. Os parâmetros podem ser de : ENTRADA (passado por valor) ou de ENTRADA/SAÍDA (passado por referência). Os parâmetros de ENTRADA não podem ser alterados pelo procedimento, para que isso seja possível o parâmetro deve ser de ENTRADA/SAÍDA Para indicar que um parâmetro é de ENTRADA/SAÍDA devemos colocar a palavra VAR antes da sua declaração.

Referência :

NomeDoProcedimento(variáveis)

OBS: As variáveis passadas aos procedimentos são associadas aos parâmetros do procedimento de acordo com a ordem das variáveis e da lista de parâmetros.

Funções - Uma função é semelhante a um procedimento, sendo que esta deve retornar, obrigatoriamente, um valor em seu nome, desta forma, é necessário declarar, no cabeçalho da função, qual o seu tipo.

Declaração :

Função NomeDaFunção [(parâmetros)] : tipo_da_função

Variáveis

Inicio

Comandos

NomeDaFunção ¬ (expressão de retorno)

Fim;

Referência :

NomeDaFunção(parâmetro)

ALGORÍTMOS DE PESQUISA

A capacidade de armazenar informações foi um passo decisivo na evolução da ciência da computação e para o nível generalizado de utilização do computador. Com isso, a capacidade de cuperar informações, para posterior processamento, assume papel de suma importância na utilização cotidiana do computador, existindo para isto inúmeros exemplos, como: recuperação de dados de dados de transações bancárias de um cliente através de um número de conta, no cadastro de cliente/operações de um banco. Portanto, algorítmos de pesquisa devem ser projetados de forma a garantir a confiabilidade e eficiência exigidas pela importância das aplicações existentes.

A pesquisa de dados pode ser efetuada tanto em unidades de memória secundárias (disco rígido, disquetes, fita), quanto na memória principal do computador.

PESQUISA SEQUENCIAL

O método mais simples de determinar a presença, ou não, de um elemento numa seqüência, é percorrê-la a partir do seu início, efetuando comparações, até que o elemento seja encontrado ou o fim da seqüência seja alcançado. Este método é chamado de pesquisa seqüencial.

Dados :

vetor de n elementos (n conhecido)

elemento a ser pesquisado no vetor

Resultado:

Se o elemento existe, mostra-se a sua posição ou o total de ocorrências deste no vetor.

Se o elemento não existe, mostra-se uma mensagem de falha.

As considerações que podem ser feitas sobre os dados de entrada (vetor), são do tipo: o vetor esta ou não ordenado; o elemento ocorre uma única vez (pesquisa única) ou repetidas vezes no vetor (pesquisa única). Isso acarreta os seguintes tipos de pesquisa:

a. Desordenada Única

b. Desordenação Múltipla

c. Ordenada Única

d. Ordenada Múltipla

Pesquisa Binária

O método de pesquisa seqüencial é fácil de escrever e é razoavelmente eficientes para seqüências com poucos elementos. Entretanto, para seqüências de tamanho considerável, que ocorrem na maioria das aplicações existentes, a utilização do método torna-se inviável. Uma estratégia interessante e eficiente é utilizada no método de pesquisa binária.

Descrição Geral do Método:

·        Definir intervalo inicial (i, f) de busca

·        Determinar a posição média do intervalo(m = (i+f) DIV 2)

·        Comparar o elemento da posição média (v[m]) com o elemento E:

·        Caso sejam iguais então terminou as pesquisa

·        Caso contrário definir o novo intervalo de busca

·        Aplicar sucessivamente o passo anterior até encontrar E ou não existir mais o intervalo de busca

São aspectos fundamentais do método:

·        vetor de entrada tem que estar ordenado

·        intervalo de busca inicial é (i,f) = (1,n)

·        intervalo de busca, considerado a cada iteração, é definido do seguinte modo:

(i,m-1), se (E < v[m])

(m+1,f), se (E > v[m])

tendo a metade do tamanho do intervalo original

·        O teste de repetição é (i <= f) e Não Achou

Dados :

vetor de n elementos (n conhecido)

elemento a ser pesquisado no vetor

Resultado

Se o elemento existe, mostra-se a sua posição ou o total de ocorrências deste no vetor.

Se o elemento não existe, mostra-se uma mensagem de falha

ALGORÍTMOS DE ORDENAÇÃO

Os problemas de ordenação são comuns tanto em aplicações comerciais quanto científicas. Entretanto, raro são os problemas que se resumem à pura ordenação de seqüências de elementos. Normalmente, os problemas de ordenação são inseridos em problemas de pesquisa, intercalação e atualização. Isto torna ainda mais importante o projeto e a construção de algoritmos eficientes e confiáveis para tratar o problema.

O nosso objetivo é analisar os seguintes tipos de ordenação :

a. Selection Sort

b. Bubble Sort

c. Insertion Sort

a. Selection Sort

Este método é um dos mais simples e intuitivos dentre os métodos existentes. Sua estratégia básica é selecionar o menor elemento da seqüência considerada e colocá-lo no início da seqüência. Assim, dada uma seqüência de tamanho n, várias iterações são efetuadas, sendo que a cada vez que esta estratégia é aplicada, uma nova seqüência é gerada pela eliminação do menor elemento da seqüência original.

Procedure SelectionSort ( var vet : vetor; n : integer);

{ordenado crescente}

var

i, j, pmin : integer;

begin

for i¬ 1 to (n-1) do

begin

pmin ¬ i;

for j¬ (i+1) to n do

if vet[j] < vet[pmin]

then pmin ¬ j;

trocar (vet[i], vet[pmin] ) ;

end;

end;

b. Bubble Sort

A estratégia utilizada pelo BubbleSort consiste de comparações e trocas entre elementos consecutivos da seqüência, a fim de "empurrar" o maior elemento para a última posição. Assim, várias iterações são efetuadas e, para cada seqüência considerada, a aplicação da estratégia gera uma nova seqüência pela eliminação do maior elemento da seqüência original.

Além disto, uma variável de controle (lógica) é utilizada para registrar a ocorrência ou não de troca entre elementos da seqüência. Quando nenhuma troca é efetuada, tem-se que a seqüência considerada já estava ordenada. Esta particularidade determina, em alguns casos, um número menor de comparações que o método SelectionSort.

Procedure BubbleSort ( var vet : vetor ; n integer) ;

{ordem crescente}

var

i, limite : integer;

trocou : boolean;

begin

limite ¬ n;

repeat

trocou ¬ false;

for i¬ 1 to (limite - 1) do

begin

if vet[i] > vet [i+1] then

begin

trocar(vet[i], vet[i+1]);

trocou ¬ true;

end;

end;

limite ¬ limite - 1

until not trocou

end;

c. Insertion Sort

Este método baseia-se no seguinte processo de inserção controlada:

·        Com o primeiro elemento da seqüência forma-se uma seqüência de tamanho 1, ordenada.

·        Cada elemento restante da seqüência original é inserido na seqüência, de modo que esta permaneça ordenada. Isto é feito através de uma pesquisa na seqüência ordenada que determina a posição que o novo elemento deverá ser inserido.

·        Quando um elemento é inserido a frente de outro, estes deverão ser deslocados de uma posição.

RECURSIVIDADE

Recursão é um método geral para resolver problemas reduzindo-os a problemas mais simples do mesmo tipo. A estrutura geral de uma solução recursiva de um problema é assim :

Resolva de forma recursiva um problema.

·        Se o problema é trivial, faça o obvio (resolva-o)

·        Simplifique o problema

·        Resolva de forma recursiva (um problema mais simples)

·        Combine (na medida do possível) a solução do(os) problemas mais simples em uma solução do problema original

Um subprograma recursivo chama a si próprio constantemente, cada vez em uma situação mais simples, até chegar ao caso trivial, quando pára. Devemos lembrar que recursividade deve ser utilizada na solução de problemas que tenham a natureza recursiva.

Exemplos :

a.       Somatório de inteiros - Se n =1; Somatório = 1. Caso contrário Somatório = n + Somatório(n-1)

b.      Fatorial - Se n=0 ou n=1 ; Fatorial = 1. Caso contrário Fatorial = n*Fatorial(n-1)

c.       MDC - Se b divide a, então o MDC é b. Caso contrário, MDC(a,b) = MDC(b,a mod b)

d.      N-ésimo termo da série de Finonacci . 1° e 2° = 1 e n-ésimo = (n-1)+(n-2)

e.       Torre de hanoi
Algoritmo de Prim
Este capítulo trata do célebre algoritmo de Prim para o problema da MST. (Veja os conceitos básicos sobre esse problema no capítulo Árvores geradoras de custo mínimo.)  O algoritmo foi publicado por Robert C. Prim em 1957 e por E. W. Dijkstra pouco depois.

Problema:  Encontrar uma MST (árvore geradora de custo mínimo) de um grafo não-dirigido com custos nas arestas.

Os custos das arestas são números inteiros arbitrários (positivos e negativos).  O problema tem solução se e somente se o grafo é conexo. Assim, trataremos apenas de grafos conexos. (Mas veja exercício abaixo.)

O algoritmo de Prim é simples, mas sua implementação eficiente apresenta dificuldades inesperadas. A solução dessas dificuldade ensina interessantes lições de programação.
O algoritmo
Dado um grafo não-dirigido conexo G com custos nas arestas, o algoritmo de Prim cultiva uma subárvore de G até que ela se torne geradora. No fim do processo, a árvore é uma MST.

Para discutir os detalhes, precisamos de um pouco de terminologia.  Suponha que T é uma subárvore (não necessariamente geradora) de G.  A franja (= fringe) de T é o conjunto de todas as arestas de G que têm uma ponta em T e outra fora.  Portanto, a franja de T nada mais é que o leque do conjunto de vértices de T.

Podemos agora descrever o algoritmo de maneira precisa.  Cada iteração começa com uma subárvore T.  No início da primeira iteração, T consiste em um único vértice.  O processo iterativo consiste no seguinte: [!] enquanto a franja de T não estiver vazia,

escolha uma aresta da franja que tenha custo mínimo,
seja x-y a aresta escolhida, com x em T,
acrescente a aresta x-y e o vértice y a T.
Como se vê, o algoritmo tem caráter guloso: em cada iteração, abocanha a aresta mais barata da franja sem se preocupar com o efeito global dessa escolha.  A prova de que essa estratégia está correta segue do critério de minimalidade baseado em cortes.
A primeira iteração do algoritmo de Prim pode começar com qualquer vértice. Neste exemplo, escolhemos o vértice 0.  A tabela abaixo registra, no início de cada iteração, o conjunto de vértices da subárvore T, o custo de T, e as arestas da franja de T.
Qualquer conjunto de instruções é um algoritmo, mas a palavra tem sido frequentemente usada na referência a situações que envolvem o aprendizado de máquina
Você certamente já ouviu ou leu a palavra "algoritmo". Ela tem aparecido com cada vez mais frequência em diversas situações, seja na forma como o Facebook exibe postagens de amigos, ou como as fotos aparecem no Instagram. Raramente, porém, explica-se do que se trata: você, por exemplo, sabe o que é um algoritmo? E por que eles estão tão em evidência?
De forma bastante genérica, pode-se dizer que algoritmos são conjuntos de instruções usados para a solução de problemas. Pode ser, por exemplo, uma receita culinária ou até mesmo a forma como uma criança é ensinada a lavar as mãos.
Quem tem eletrodomésticos em casa já deve ter visto, no manual de instruções do aparelho, referências para solucionar pequenos contratempos. É o caso, por exemplo, de quando a máquina de lavar não funciona ao ser ligada ou a TV recém-instalada não sintoniza os canais. Na documentação do aparelho, é possível saber quais passos devem ser seguidos para que ele funcione adequadamente.

Quando se usa a palavra "algoritmo", entretanto, geralmente se quer designar os conjuntos de instruções direcionados a computadores. Isso porque cada vez que um sistema computacional (em um computador pessoal, em um smartphone ou em qualquer outro dispositivo que tenha uma central desse tipo) executa uma função, ele o faz com base em um algoritmo.

Quem escreve essas instruções é um programador: esse profissional é especialista em dizer ao computador o que ele deve fazer. A programação é, portanto, a base da criação de software e, por isso, o código escrito pelo programador faz o computador executar as mais variadas tarefas.


Em resumo, então, qualquer conjunto de instruções — os chamados códigos — que faça a máquina entrar em ação é um algoritmo. Quando o equipamento é ligado, ele executa a lista de comandos que permitem que essa ação seja feita. Ao ser desligado, ocorre o mesmo. E assim por diante para qualquer outra atividade realizada por ele — das mais simples às absolutamente complexas.

Os algoritmos no dia a dia
Em anos recentes, os algoritmos ganharam notoriedade nas redes sociais. Isso porque são usados de formas diversas nessas plataformas: para sugerir amigos, para apresentar publicidade, para coletar dados pessoais e por aí vai. É como se eles fossem uma ferramenta mágica com poderes maléficos que expõem o lado danoso das redes sociais.

E isso acontece porque, na verdade, o que entra em ação nesse caso é o aprendizado de máquina. O algoritmo está lá, mas é a inteligência artificial embutida nele que faz que ele se torne incômodo para muitos: afinal, como os programadores não podem testar todas as possibilidades em que um código vai atuar, eles criam instruções adaptáveis.
É por isso que, quando muitos e-mails de um determinado remetente são enviados para a lixeira, a própria ferramenta de correio passa a colocá-los nessa pasta automaticamente. Ela aprende que essas mensagens não são úteis para o destinatário.

Da mesma forma, sempre que se faz compras em lojas online, como a Amazon, o algoritmo guarda as informações para, depois, usar esses dados para sugerir produtos similares — e que, de preferência, tenham chance de ser comprados pelo cliente. O mesmo raciocínio vale para serviços de streaming, como a Netflix, que indica produções ao cliente.

Aplicativos de navegação, como o Waze e o Google Maps, também adotam o conceito: depois de alguns usos, a ferramenta passa a conferir as condições das rotas mais frequentes. Assim, no horário de saída de casa, ela informa quanto tempo leva o trajeto até o trabalho (ou a escola), por exemplo. Quando o usuário deixa a empresa, de forma similar, mostra como está a rota de volta.
Recentemente, um algoritmo incorporado ao Gmail passou a oferecer sugestões de respostas aos e-mails recebidos. Trata-se de uma opção que facilita bastante o dia a dia — especialmente para aquelas mensagens que requerem apenas um consentimento ou um agradecimento.

Se por um lado essas intervenções são úteis em muitas situações, há quem as considere invasivas demais. Enquanto o YouTube e a Amazon fazem sugestões, serviços como o Google e o Facebook acabam por determinar o que o usuário vê ou não ao decidir quais resultados de pesquisa ou quais posts devem ser apresentados a ele.

Isso tornou os algoritmos bastante polêmicos. O aprendizado obtido pelas máquinas faz esses códigos produzirem respostas cada vez mais subjetivas, que incluem um componente forte de interpretação. Só que as preferências do usuário têm nuances que, muitas vezes, por maior que seja o aprendizado do algoritmo, são difíceis de detectar.
No conceito original de algoritmo, a ideia é que o conjunto de instruções leve a uma resposta certa. Então, quando se faz uma operação matemática em uma calculadora, por exemplo, não há meio termo. Quando a inteligência artificial é adicionada ao processo, a exatidão acaba comprometida.

Cada vez mais sofisticado
Em resumo, os algoritmos são a base de qualquer software. Sem eles, boa parte dos equipamentos nem sequer existiria: computadores, smartphones, TVs inteligentes, máquinas de lavar, panelas elétricas, fornos de micro-ondas e mais uma série de outros dispositivos aproveitam, de algum modo, esse conceito.
A forma como a palavra tem sido usada, entretanto, faz crer que se trata de algo distinto. Sua associação com a inteligência artificial fez que seu significado ficasse um pouco nebuloso — e até mais específico.
Como o idioma está em constante transformação, "algoritmo" talvez esteja se tornando a palavra que vai descrever o universo às vezes um pouco dúbio do aprendizado de máquina. Isso é até saudável, mas é preciso lembrar que ele, em seu princípio fundamental, é o conjunto de instruções para resolver problemas. Só que está cada vez mais sofisticado.

Qual a primeira coisa que vem à sua cabeça quando você lê ou escuta a palavra “algoritmo”? Certamente, você imagina algo relacionado a computadores, códigos, números e o universo de programação, né? De fato, os algoritmos estão intimamente ligados à linguagem de programação, já que eles são as sequências de passos que irá compor um determinado programa. No entanto, o conceito de “algoritmo” é anterior à programação. Na realidade, até uma receita de bolo pode ser considerada um algoritmo. É isso mesmo! Ficou curioso? Então acompanhe a gente nessa leitura e entenda melhor o que é e qual a importância dos algoritmos no nosso dia a dia.

O algoritmo é uma receita Primeiramente, vamos explicar essa coisa de “receita”. Um algoritmo não é nada mais que uma sequência lógica finita para instruir algo ou alguém a realizar uma tarefa. É por isso que fizemos a comparação com uma receita. Imagine que, para fazer um bolo, você precisa seguir passo a passo uma série de instruções exatas em ordem e quantidade, senão tudo vai por água abaixo. Cada elemento tem uma finalidade dentro de um objetivo final: formar o bolo.

Com os computadores é a mesma coisa. Cada comando dentro de um algoritmo tem uma finalidade e direção que, ao final, irá gerar um resultado. E, caso alguma coisa saia do planejado por algum erro de “medida”, o resultado pode ser totalmente diferente. É por isso que, dentro de um algoritmo, tudo deve ser muito bem explicado para o computador, já que para o sistema não existe “óbvio”. Só que nós humanos não falamos a língua dos computadores. É por isso que existe a linguagem de programação, que serve como uma ponte para os programadores “falarem a língua” dos computadores. Basicamente, o algoritmo é um tipo de fluxograma, no qual um losango irá sinalizar para a ação que se espera ser realizada.
Como o Google encontra o que você quer?
Você já parou para se perguntar como o Google realiza suas buscas com tanta precisão e eficiência? Na verdade, você alguma vez você já pensou que os conteúdos que o Google leva até você são limitados? É importante dizer isso porque muitas vezes vemos o buscador como se fosse a própria internet. É nossa melhor e mais confiável fonte nesse meio, não é?

O PageRank é a figura que está por trás de toda essa eficiência do Google. Ele é um algoritmo com mais de 20 anos que foi desenvolvido por Larry Page, um dos cofundadores do gigante das buscas. Esse algoritmo opera em conjunto com programas chamados de spiders (aranhas) ou crawlers (rastejadores) buscando páginas que se encaixem com os elementos digitados por você na busca.

Como dissemos: os conteúdos que o Google encontra não são infinitos. Eles estão pré-dispostos em uma extensa rede de páginas “indexadas”, ou seja, armazenadas em um grande banco de dados. Esse banco de dados é organizado pelas spiders seguindo uma série de critérios como palavra-chave, país, data e idioma. Depois de separadas, o PageRank começa seu trabalho. Ele mede a importância de uma página analisando quesitos como a quantidade e qualidade de links que apontam para ela. O PageRank não é o único algoritmo que o Google utiliza, mas é o mais antigo e popular.

Talvez você se interesse por isso!

Seu fone de ouvido parou de funcionar um lado! Você tuíta sobre isso, pesquisa em alguns blogs como solucionar esse problema e volta às suas atividades na internet. Dentro de alguns minutos começa a aparecer uma série de anúncios de fones de todas as marcas no seu feed. Já aconteceu algo assim com você? Se a resposta for não, comece a ficar de olho nos conteúdos que você explora na internet e os anúncios que aparecem para você em seguida. Certamente você vai notar essa relação.

Mas, calma! Não é nenhuma mágica. São simplesmente os algoritmos trabalhando para facilitar sua vida e levar a você o que você deseja com mais praticidade. Alguns dos principais métodos utilizados por esses algoritmos para entregar conteúdos mais relacionados com seu perfil na web são pesquisa, conteúdo, filtragem colaborativa e item a item.

Quem nunca matou um tempinho rolando a timeline do Facebook?

É impossível acompanhar 100% dos conteúdos que seus amigos e páginas que você segue publicam no Facebook. Afinal, um usuário está exposto a cerca de 1500 publicações por dia na rede social. É por isso que a plataforma trabalha filtrando o que chega a você. E como ela faz isso? É simples: algoritmos.

O EdgeRank é o algoritmo do Facebook que seleciona quais os posts mais relevantes para aparecer no seu feed. Assim como o PageRank, do Google, ele considera vários fatores antes de entregar a você o que chega na sua timeline, como o número de comentários sobre o assunto nas postagens, quem fez a postagem, qual o tipo (foto, vídeo, atualização de perfil e etc.). Por conta disso, conteúdos que possuem uma maior interação acabam roubando a cena em meio as outras publicações. É por isso que, para uma empresa, é muito rentável quando há uma grande movimentação de comentários, curtidas e compartilhamentos de consumidores em seus posts.

Outro fator no qual o EdgeRank se baseia na hora de entregar os conteúdos mais a ver com você são as pessoas com quem você interage, curte, comenta e compartilha coisas. Tudo isso é utilizado por ele para mapear cada usuário. Não é à toa que você vê muito mais publicações das mesmas pessoas, enquanto outras simplesmente não aparecem em seu feed.

Mais família, menos Fake News Porém, tudo que é demais prejudica. Nos últimos três anos, a onda de notícias falsas, títulos “caça-cliques” e outras publicações sem sentido tomaram conta do cenário virtual, especialmente do Facebook. Muitos desses elementos, principalmente as Fake News, causaram consequências sérias no “mundo real”. Por conta disso, a rede de Mark Zuckemberg se viu obrigada a tomar uma medida que aperfeiçoasse seu sistema de verificação.

No início do ano passado (2018), a rede social mais utilizada do mundo anunciou uma atualização que teria o objetivo de conectar as pessoas com um lado mais “humano”. Foi diminuído o alcance de notícias, anúncios e conteúdos mais supérfluos e passaram a ser difundidos para cada usuário mais publicações de seus amigos e familiares. Você não reparou que aquele seu colega de trabalho ou faculdade tem dado mais as caras no seu feed?

O fato é que essa tecnologia cada vez mais inteligente é uma maneira que a internet busca de facilitar os processos de relação e consumo entre marcas e pessoas. O mundo está pedindo mais em menos. Os algoritmos são a ponte para sanar essa necessidade. Eles funcionam como verdadeiras receitas para entregar ao usuário exatamente o que ele quer com cada vez menos esforço. É um fator que pode, talvez, proporcionar mais tempo para cada um aproveitar mais seu dia a dia à sua maneira.
